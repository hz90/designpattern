
面向对象三大基本特性

封装
封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。

继承
继承是一种类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。

多态
多态性是指允许不同类的对象对同一消息作出响应。多态性包括编译时多态和运行时多态。 
主要作用就是用来将接口和实现分离开，改善代码的组织结构，增强代码的可读性。 
在某些很简单的情况下，或许我们不使用多态也能开发出满足我们需要的程序，但大多数情况，如果没有多态，就会觉得代码极其难以维护。

类和类之间存在着如下关系

依赖关系
关联关系
聚合关系
组合关系
继承关系
实现关系

依赖关系（Dependency）：
         1.将A类作为B类中某个方法的参数     B类中public void test(A a){}
         2.A类是B类某个方法中的局部变量 B类public void test(){A a=new A();}
         3.A类中的某个方法中调用B类中的静态方法   B类 public void test1(){A.callA();}
 driver开car
 car作为driver中drive（car car）的参数，以便在drive中调用car中的run（）方法，driver依赖car
 
关联关系（Association）：
         1.双向关联（（customer）顾客购买商品(product)，卖出的商品和顾客之间也有关系（小票），这个商品属于某个特定的顾客）
         2.单项关联（（customer）顾客拥有地址（address））
         3.自关联(类中拥有自己（Node节点类）)
         4.多重关联（一个表单Form拥有零个或多个按钮，但是一个按钮只属于一个表单）


聚合关系（Aggregation）：
         一个整体和部分的关系，通常在定义一个整体类后，再去分析整体类的组成结构，从而找出一些成员类，该整体类和成员类之间就形成了聚合关系。
         比如，一个计算机包含显示器，键盘，鼠标，主机等，汽车，包含发动机，轮胎，玻璃等等，（学校与学生的关系就是聚合关系）
         与组合的区别是：学校不存在但是学生不会不存在，
         
组合关系（Composition）：
         也表示整体和部分的关系，区别是组合在部分和整体具有统一的生命周期，一旦整体对象不存在，部分对象也不存在了，
         部分和整体对象之间是同生共死的关系，整体对象控制成员对象的生命周期。
         （1.人的头，头里面有嘴巴，头没了，嘴巴也就没了，）
         （2.界面对象，包含按钮，文本，对象，界面对象消失，则文本，按钮对象也会消失。）
         
继承关系（泛化关系Generalization：extends）:
          is-a-kind-of
          
实现关系（Realization： implements）:
         接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现关系(Realization)，
         在这种关系中，类实现了接口，类中的操作实现了接口中所 声明的操作。
         
         
总结：         
关于关联，聚合，组合在实现上并没有显著区别，相区别他们只有通过判断关系双方之间的实际关系，如关系强弱、创建与销毁之间有无必要关联等。
强弱关系：依赖 < 关联 < 聚合 < 组合<（继承）

实现方式区别：
             1.依赖关系：关系对象出现在局部变量或者方法的参数里，或者关系类的静态方法被调用
             2.关联关系：关系对象出现在实例变量中
             3.聚合关系:关系对象出现在实例变量中
             4.合成关系：关系对象出现在实例变量中
             5.Generalization：extends
             6.Realization： implements
